`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 2022/03/18 00:51:04
// Design Name: 
// Module Name: eth_test_top
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module eth_test_top(
    input        clk_40m,
    output       led,
    output       phy_rstn,

    input        rgmii_rxc,
    input        rgmii_rx_ctl,
    input [3:0]  rgmii_rxd,
                 
    output       rgmii_txc,
    output       rgmii_tx_ctl,
    output [3:0] rgmii_txd 
);
    
    wire         rst;              
    wire         rgmii_clk;        
    wire         rgmii_clk_90p;       
                 
    wire         mac_rx_data_valid;
    wire [7:0]   mac_rx_data;    
                 
    wire         mac_data_valid;  
    wire  [7:0]  mac_tx_data;  
    
    reg          arp_req;
     
//    eth_clock eth_clock(
//        // Clock out ports
//        .clkout0          (  rgmii_clk_90p  ),// output clk_out1           
//        .lock             (  rstn           ),// output locked             
//        .clkin1           (  rgmii_clk      ) // input clk_in1             
//    );
   
    
    wire clk_125m;
    wire clk_200m;
//    wire locked;
    wire idelayctrl_rdy;
    reg  idelay_ctl_rst;
    reg  [3:0] setup_cnt=4'hF;
    ref_clock ref_clock(
        // Clock out ports
        .clkout0 ( clk_200m  ), // output clk_out1
        .clkout1 ( clk_125m  ), // output clk_out2
        .pll_lock( rstn      ), // output locked
        .clkin1  ( clk_40m   )  // input clk_in1
    );
    
    always @(posedge clk_200m)
    begin
        if(~rstn)
            setup_cnt <= 4'd0;
        else
        begin
            if(setup_cnt == 4'hF)
                setup_cnt <= setup_cnt;
            else
                setup_cnt <= setup_cnt + 1'b1;
        end
    end
    
    always @(posedge clk_200m)
    begin
        if(~rstn)
            idelay_ctl_rst <= 1'b1;
        else if(setup_cnt == 4'hF)
            idelay_ctl_rst <= 1'b0;
        else
            idelay_ctl_rst <= 1'b1;
    end
    
//    // An IDELAYCTRL primitive needs to be instantiated for the Fixed Tap Delay
//    // mode of the IDELAY.
//    IDELAYCTRL  #(
//       .SIM_DEVICE (  "7SERIES"    )
//    ) idelayctrl_inst(
//       .RDY        (  idelayctrl_rdy ),
//       .REFCLK     (  clk_200m       ),
//       .RST        (  idelay_ctl_rst )
//    );  
    
    wire               udp_rec_data_valid;
    wire [7:0]         udp_rec_rdata ;    
    wire [15:0]        udp_rec_data_length;
    
    eth_udp_test eth_udp_test(
        .rgmii_clk              (  rgmii_clk            ),//input                rgmii_clk,
        .rstn                   (  rstn                 ),//input                rstn,
        .gmii_rx_dv             (  mac_rx_data_valid    ),//input                gmii_rx_dv,
        .gmii_rxd               (  mac_rx_data          ),//input  [7:0]         gmii_rxd,
        .gmii_tx_en             (  mac_data_valid       ),//output reg           gmii_tx_en,
        .gmii_txd               (  mac_tx_data          ),//output reg [7:0]     gmii_txd,
                                                      
        .udp_rec_data_valid     (  udp_rec_data_valid   ),//output               udp_rec_data_valid,         
        .udp_rec_rdata          (  udp_rec_rdata        ),//output [7:0]         udp_rec_rdata ,             
        .udp_rec_data_length    (  udp_rec_data_length  ) //output [15:0]        udp_rec_data_length         
    );
    
    wire        arp_found;
    wire        mac_not_exist;
    wire [7:0]  state;
    
//    assign mac_not_exist = eth_udp_test.mac_not_exist;
//    assign arp_found = eth_udp_test.arp_found;
//    assign state = eth_udp_test.state;
//    
//    rgmii_ila rgmii_ila (
//    	.clk     (  clk_125m                   ),// input wire clk
//                                               
//    	.probe0  (  mac_rx_data_valid          ),// input wire [0:0]  probe0  
//    	.probe1  (  mac_rx_data                ),// input wire [7:0]  probe1
//    	.probe2  (  udp_rec_data_valid         ),// input wire [0:0]  probe0  
//    	.probe3  (  udp_rec_rdata              ),// input wire [7:0]  probe1
//    	.probe4  (  {mac_data_valid,mac_not_exist}  ),// input wire [0:0]  probe0  
//    	.probe5  (  mac_tx_data                      ) // input wire [7:0]  probe1
//    );
    
    rgmii_interface rgmii_interface(
        .rst                       (  ~rstn              ),//input        rst,
        .rgmii_clk                 (  rgmii_clk          ),//output       rgmii_clk,
        .rgmii_clk_90p             (  rgmii_clk_90p      ),//input        rgmii_clk_90p,
  
        .mac_tx_data_valid         (  mac_data_valid     ),//input        mac_tx_data_valid,
        .mac_tx_data               (  mac_tx_data        ),//input [7:0]  mac_tx_data,
    
        .mac_rx_error              (                     ),//output       mac_rx_error,
        .mac_rx_data_valid         (  mac_rx_data_valid  ),//output       mac_rx_data_valid,
        .mac_rx_data               (  mac_rx_data        ),//output [7:0] mac_rx_data,
                                                         
        .rgmii_rxc                 (  rgmii_rxc          ),//input        rgmii_rxc,
        .rgmii_rx_ctl              (  rgmii_rx_ctl       ),//input        rgmii_rx_ctl,
        .rgmii_rxd                 (  rgmii_rxd          ),//input [3:0]  rgmii_rxd,
                                                         
        .rgmii_txc                 (  rgmii_txc          ),//output       rgmii_txc,
        .rgmii_tx_ctl              (  rgmii_tx_ctl       ),//output       rgmii_tx_ctl,
        .rgmii_txd                 (  rgmii_txd          ) //output [3:0] rgmii_txd 
    );
assign led =  (udp_rec_data_valid== 1'b1 ? (|udp_rec_rdata) : (&udp_rec_data_length));
    
    
//    wire led_1;
//    gmii2rgmii gmii2rgmii(
//        .led                (  led_1              ),//output reg      led,
//        .rgmii_rxc          (  rgmii_rxc          ),//input           rgmii_rxc,     //add
//        .reset              (  ~rstn              ),//input           reset,
//        .rgmii_td           (  rgmii_txd          ),//output  [ 3:0]  rgmii_td,
//        .rgmii_tx_ctl       (  rgmii_tx_ctl       ),//output          rgmii_tx_ctl,
//        .rgmii_txc          (  rgmii_txc          ),//output          rgmii_txc,
//                                                  
//        .rgmii_rd           (  rgmii_rxd          ),//input   [ 3:0]  rgmii_rd,
//        .rgmii_rx_ctl       (  rgmii_rx_ctl       ),//input           rgmii_rx_ctl,
//        .gmii_rx_clk        (  rgmii_clk          ),//output          gmii_rx_clk,
//                                                  
//        .gmii_txd           (  mac_tx_data        ),//input   [ 7:0]  gmii_txd,
//        .gmii_tx_en         (  mac_data_valid     ),//input           gmii_tx_en,
//        .gmii_tx_er         (  1'b0               ),//input           gmii_tx_er,
//        .gmii_tx_clk        (  rgmii_clk          ),//output          gmii_tx_clk,
//                                                  
//        .gmii_rxd           (  mac_rx_data        ),//output  [ 7:0]  gmii_rxd,
//        .gmii_rx_dv         (  mac_rx_data_valid  ),//output          gmii_rx_dv,
//        .gmii_rx_er         (                     ),//output          gmii_rx_er,
//        .speed_selection    (  2'b10              ),//input  [ 1:0]   speed_selection, // 1x gigabit, 01 100Mbps, 00 10mbps
//        .duplex_mode        (  1'b1               ) //input           duplex_mode      // 1 full, 0 half
//    );//
//    assign led =  led_1 &(udp_rec_data_valid== 1'b1 ? (|udp_rec_rdata) : (&udp_rec_data_length));
//    
    assign phy_rstn = rstn;
    
endmodule
